package ch.bbw.zork;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.util.StringTokenizer;public class Parser {	private CommandWords commands; // holds all valid command words	private InputStream inputStream;	public Parser() {		inputStream = System.in;		commands = new CommandWords();	}	public Command get() {		String s = ""; // will hold the full input line		String w1, w2;		System.out.print("> "); // print prompt				BufferedReader reader = new BufferedReader(new InputStreamReader(				this.inputStream));		try {			s = reader.readLine();		} catch (java.io.IOException exc) {			System.out.println(				"There was an error during reading: " + exc.getMessage());		}		StringTokenizer tokenizer = new StringTokenizer(s);		if (tokenizer.hasMoreTokens()) {			w1 = tokenizer.nextToken(); // get first word					} else {						w1 = null;		}		if (tokenizer.hasMoreTokens()) {						w2 = tokenizer.nextToken(); // get second word		} else {			w2 = null;					}				// note: we just ignore the rest of the input line.		// Now check whether this word is known. If so, create a command		// with it. If not, create a "nil" command (for unknown command).		if (commands.isCommand(w1)) {			return new Command(w1, w2);		} else {			return new Command(null, w2);		}	}	public String showCommands() {		return commands.showAll();	}}